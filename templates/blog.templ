package templates

import "blog/models"

type BlogData struct {
	Post  models.Post
	Posts []models.Post
}

templ blogHeaderComponent(data BlogData) {
	<div class="relative w-full mx-auto mb-4">
		<div class="absolute inset-0 text-white z-10  before:absolute before:inset-x-0 before:bottom-0 before:h-1/3 before:bg-gradient-to-t before:from-black/50 before:transition-opacity">
			<div class="max-w-6xl mx-6 xl:mx-auto absolute inset-x-0 bottom-0 p-6 md:px-12 md:py-8">
				<h1 class="text-4xl font-medium ">{ data.Post.Title }</h1>
				<p class="">{ data.Post.Date.Format("02 January 2006") }</p>
			</div>
		</div>
		<img class="w-full h-96 object-cover" src={ data.Post.HeaderImage.Url } alt={ data.Post.HeaderImage.Alt }/>
	</div>
}

templ contentComponent(data BlogData) {
	<div class="max-w-6xl mx-6 xl:mx-auto mb-24">
		<div class="columns-2 md:columns-3 gap-4 space-y-4">
			<article>
				@templ.Raw(data.Post.HTML())
			</article>
			for _, image := range data.Post.Images {
				@ImageWithTitle(image)
			}
		</div>
	</div>
}

templ ImageWithTitle(image models.Image) {
	<div class="group relative rounded-xl overflow-hidden">
		<div _="on click toggle .h-96 on <img/> in me" class="">
			<div class="opacity-0 group-hover:opacity-100 transition duration-1000 absolute inset-0 text-white z-10 before:absolute before:inset-x-0 before:bottom-0 before:h-1/3 before:bg-gradient-to-t before:from-black/50 before:transition-opacity rounded-xl">
				<div class=" absolute inset-x-0 bottom-0 p-2">
					<p class="text-sm font-medium">{ image.Title }</p>
				</div>
			</div>
			<img class="w-full min-h-36 object-cover rounded-xl shadow" src={ image.Url } alt={ image.Alt }/>
		</div>
	</div>
}

templ ContentPage(data BlogData) {
	@Layout(data.Post.Title) {
		@blogHeaderComponent(data)
		@contentComponent(data)
		@carousel(data)
	}
}

templ carousel(data BlogData) {
		<div class="relative w-full max-w-4xl mx-auto">
			<!-- Carousel wrapper -->
			<div class="overflow-hidden relative rounded-lg">
				<div
					class="flex transition-transform duration-500 ease-in-out transform"
					id="carousel"
				>
				for _, image := range data.Post.Images {
					<!-- Slide 1 -->
					<div class="min-w-full">
						<img
							src={ image.Url }
							alt={ image.Alt }
							class="w-full h-full object-cover"
						/>
					</div>
				}
				</div>
			</div>

			<!-- Navigation buttons -->
			<button
				class="absolute top-1/2 left-0 transform -translate-y-1/2 p-3 bg-gray-700 bg-opacity-50 rounded-full text-white hover:bg-opacity-75 focus:outline-none"
				onclick="scrollCarousel(-1)"
			>
				<svg
					class="w-6 h-6"
					fill="none"
					stroke="currentColor"
					viewBox="0 0 24 24"
					xmlns="http://www.w3.org/2000/svg"
				>
					<path
						stroke-linecap="round"
						stroke-linejoin="round"
						stroke-width="2"
						d="M15 19l-7-7 7-7"
					></path>
				</svg>
			</button>
			<button
				class="absolute top-1/2 right-0 transform -translate-y-1/2 p-3 bg-gray-700 bg-opacity-50 rounded-full text-white hover:bg-opacity-75 focus:outline-none"
				onclick="scrollCarousel(1)"
			>
				<svg
					class="w-6 h-6"
					fill="none"
					stroke="currentColor"
					viewBox="0 0 24 24"
					xmlns="http://www.w3.org/2000/svg"
				>
					<path
						stroke-linecap="round"
						stroke-linejoin="round"
						stroke-width="2"
						d="M9 5l7 7-7 7"
					></path>
				</svg>
			</button>
		</div>

		<script>
			let currentIndex = 0;

			function scrollCarousel(direction) {
				const carousel = document.getElementById("carousel");
				const totalSlides = carousel.children.length;
				currentIndex =
					(currentIndex + direction + totalSlides) % totalSlides;
				carousel.style.transform = `translateX(-${
					currentIndex * 100
				}%)`;
			}
		</script>

}