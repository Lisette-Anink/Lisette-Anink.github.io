package templates

import (
	"blog/models"
	"fmt"
	"path"
	"strconv"
)

type BlogData struct {
	Post     models.Post
	Posts    []models.Post
	Next     *models.Post
	Previous *models.Post
}

templ blogHeaderComponent(data BlogData) {
	<div class="relative w-full mx-auto mb-4">
		<div class="absolute inset-0 text-white z-10  before:absolute before:inset-x-0 before:bottom-0 before:h-1/3 before:bg-gradient-to-t before:from-black/50 before:transition-opacity">
			<div class="max-w-6xl mx-6 xl:mx-auto absolute inset-x-0 bottom-0 p-6 md:px-12 md:py-8">
				<h1 class="text-4xl font-medium ">{ fmt.Sprintf("Dag %d: %s", data.Post.Day, data.Post.Title) }</h1>
				<p class="">{ data.Post.Date.Format("02 January 2006") }</p>
			</div>
		</div>
		<img class="w-full h-96 object-cover" src={ data.Post.HeaderImage.Url } alt={ data.Post.HeaderImage.Alt }/>
	</div>
}

templ contentComponent(data BlogData) {
	<div class="max-w-6xl mx-6 xl:mx-auto mb-24">
		@nextPrevButtons(data)
		<div class="columns-2 md:columns-3 gap-4 space-y-4">
			<article>
				@templ.Raw(data.Post.HTML())
			</article>
			for i, image := range data.Post.Images {
				@ImageWithTitle(image, i)
			}
		</div>
	</div>
}

templ nextPrevButtons(data BlogData) {
	<nav class="flex mb-2 -mt-2">
		<ol role="list" class="flex items-center space-x-4 w-full justify-between">
			<li>
				<div class="flex items-center">
					if data.Previous != nil {
						<a href={ templ.SafeURL(path.Join("/", data.Previous.Slug(), "/")) } class="inline-flex items-center  py-2 pr-4 pl-3 rounded-xl border border-1 border-green-600 text-sm font-medium text-green-600 hover:text-white hover:bg-green-600" aria-current="page">
							<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2.5" stroke="currentColor" class="size-4 shrink-0 text-green-600">
								<path stroke-linecap="round" stroke-linejoin="round" d="M15.75 19.5 8.25 12l7.5-7.5"></path>
							</svg>
							<span class="ml-4">Vorige</span>
						</a>
					}
				</div>
			</li>
			<li>
				<div class="flex items-center">
					if data.Next != nil {
						<a href={ templ.SafeURL(path.Join("/", data.Next.Slug(), "/")) } class="inline-flex items-center py-2 pl-4 pr-3 rounded-xl border border-1 border-green-600 text-sm font-medium text-green-600 hover:text-white hover:bg-green-600" aria-current="page">
							<span class="mr-4">Volgende</span>
							<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2.5" stroke="currentColor" class="size-4 shrink-0 text-green-600">
								<path stroke-linecap="round" stroke-linejoin="round" d="m8.25 4.5 7.5 7.5-7.5 7.5"></path>
							</svg>
						</a>
					}
				</div>
			</li>
		</ol>
	</nav>
}

templ ImageWithTitle(image models.Image, index int) {
	<div class="group relative rounded-xl overflow-hidden cursor-pointer">
		<div
			_="on click toggle .active on #modal
			 set x to  @carousel-index as Int
			 call scrollCarousel(x)"
			class=""
			carousel-index={ strconv.Itoa(index) }
		>
			<div class="opacity-0 group-hover:opacity-100 transition duration-1000 absolute inset-0 text-white z-10 before:absolute before:inset-x-0 before:bottom-0 before:h-1/3 before:bg-gradient-to-t before:from-black/50 before:transition-opacity rounded-xl">
				<div class=" absolute inset-x-0 bottom-0 p-2">
					<p class="text-sm font-medium">{ image.Title }</p>
				</div>
			</div>
			<img class="w-full min-h-36 object-cover rounded-xl shadow" src={ image.Url } alt={ image.Alt }/>
		</div>
	</div>
}

templ ContentPage(data BlogData) {
	@Layout(data.Post.Title) {
		@blogHeaderComponent(data)
		@contentComponent(data)
		@modal(data)
	}
}

templ modal(data BlogData) {
	<div id="modal" class="relative z-10" aria-labelledby="modal-title" role="dialog" aria-modal="true">
		<div class="backdrop ease-in duration-1000 fixed inset-0 bg-gray-500/75 transition-opacity" aria-hidden="true"></div>
		<div class="fixed inset-0 z-10 w-screen overflow-y-auto">
			<div class="flex min-h-full items-center justify-center p-4 text-center">
				<div class="modal-panel z-40 ease-in duration-1000 relative transform overflow-hidden rounded-lg bg-white px-4 pb-4 pt-5 text-left shadow-xl transition-all sm:my-6 sm:w-full sm:max-w-6xl sm:p-6">
					<div class="absolute right-0 top-0 pr-4 pt-4">
						<button _="on click toggle .active on #modal then call resetIndex()" type="button" class="bg-white text-gray-400 hover:text-gray-500 focus:outline-none focus-visible:outline-none">
							<span class="sr-only">Close</span>
							<svg class="size-6" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" data-slot="icon">
								<path stroke-linecap="round" stroke-linejoin="round" d="M6 18 18 6M6 6l12 12"></path>
							</svg>
						</button>
					</div>
					<div class="mt-6">
						@carousel(data)
					</div>
				</div>
			</div>
		</div>
	</div>
}

templ carousel(data BlogData) {
	<div class="relative w-full max-w-4xl mx-auto">
		<!-- Carousel wrapper -->
		<div class="overflow-hidden relative">
			<div
				class="flex transition-transform duration-500 ease-in-out transform"
				id="carousel"
			>
				for i, image := range data.Post.Images {
					<!-- Slide 1 -->
					<div slide-carousel-index={ string(i) } class="min-w-full flex flex-col gap-3">
						<div class="flex h-[80vh]  justify-center">
							<img
								src={ image.Url }
								alt={ image.Alt }
								class="object-scale-down max-h-full rounded-lg"
							/>
						</div>
						<p class="font-medium">{ image.Title }</p>
					</div>
				}
			</div>
		</div>
		<!-- Navigation buttons -->
		<button
			class="absolute top-1/2 left-0 transform -translate-y-1/2 p-3 bg-gray-700 bg-opacity-50 rounded-full text-white hover:bg-opacity-75 focus:outline-none"
			_="on click call scrollCarousel(-1)"
		>
			// onclick="scrollCarousel(-1)"
			<svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
				<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
			</svg>
		</button>
		<button
			class="absolute top-1/2 right-0 transform -translate-y-1/2 p-3 bg-gray-700 bg-opacity-50 rounded-full text-white hover:bg-opacity-75 focus:outline-none"
			onclick="scrollCarousel(1)"
		>
			<svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
				<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
			</svg>
		</button>
	</div>
	<script>
		let currentIndex = 0;
		function resetIndex() {
			currentIndex = 0;
		}
		function scrollCarousel(direction) {
			const carousel = document.getElementById("carousel");
			const totalSlides = carousel.children.length;
			currentIndex =
				(currentIndex + direction + totalSlides) % totalSlides;
			carousel.style.transform = `translateX(-${
				currentIndex * 100
			}%)`;
		}
	</script>
}
